//클래스 : 특정 객체를 설계해놓은 설계도와 같다.
//마치 집을 지을 때 설계도를 보고 집을 짓듯이!
//여기서 집이 객체(실제로 힙 영역에 생성된 인스턴스)고, 설계도가 클래스로 비유될 수 있다.
//붕어빵 틀이 클래스고, 만들어진 붕어빵이 객체다.
public class Car {
	
	//속성
	String brand; 
	String company;
	int velocity;
	int displacement;
	int price;
	int mileage;
	
	//메소드
	//리턴타입 메소드명(파라미터변수1, ..... ){
	//실행문;
	//}
	//리턴타입 : 메소드를 실행하고 나서 메소드를 호출한 쪽으로 반환해줄 데이터의 타입
	//리턴값이 없을 때는 void로 지정하면 됨
	void run() {
		System.out.println("달린다.");
	}
	void stop() {
		System.out.println("멈춘다.");
	}
	void speedup() {
		velocity++;
	}
	void speedup(int amount) {
		velocity += amount;
	}
	void runToLeft() {
		System.out.println("좌회전 한다.");
	}

}

//객체는 무조건 Heap에 생성됨
/*
 * 객체지향언어
 * 
 * 2가지 전제사항 1. 특징 지을 수 있는 모든 것들은 객체다. (사람, 물병, 남자, 여자, 볼펜, 계좌 등등)
 * 
 * 2. 모든 객체는 특성과 기능으로 표현할 수 있다. 
 * 특성 : 해당 객체를 특징 지을 수 있는 성질 
 * 기능 : 해당 객체가 수행할 수 있는 행위
 * 
 * 
 * 자동차 (객체) -- 모델링. 
 * 특성 : 브랜드, 제조사, 가격, 현재속도, 배기량, 연비 
 * 기능 : 달린다, 멈춘다, 속도를 올린다, 속도를 내린다 좌회전을 한다,
 *
 * 구현 
 * 객체 ---> 클래스 
 * 특성 ---> 속성(변수, 상수) 
 * 기능 ---> 메소드
 */

